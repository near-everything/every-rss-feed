import type { Feed as IFeed } from "../../../../server/src/schemas/feed";
import { Item } from "./item";
import { Author } from "./author";

interface FeedProps {
  id: string;
  data: IFeed;
}

export function Feed({ data }: FeedProps) {
  const formatDate = (dateString?: string) => {
    if (!dateString) return '';
    const date = new Date(dateString);
    return new Intl.DateTimeFormat('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
    }).format(date);
  };

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Feed Header */}
      <div className="bg-white dark:bg-gray-800 rounded-lg shadow-md border border-gray-200 dark:border-gray-700 p-6">
        <div className="flex items-start gap-4">
          {data.options?.image && (
            <img
              src={data.options.image}
              alt={data.options.title}
              className="w-16 h-16 rounded-lg object-cover flex-shrink-0"
            />
          )}
          <div className="flex-1">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white mb-2">
              {data.options.title}
            </h1>
            {data.options.description && (
              <p className="text-gray-600 dark:text-gray-400 mb-3">
                {data.options.description}
              </p>
            )}
            <div className="flex flex-wrap items-center gap-4 text-sm text-gray-500 dark:text-gray-400">
              {data.options.generator && (
                <span>Generated by {data.options.generator}</span>
              )}
              {data.options.language && (
                <span>Language: {data.options.language.toUpperCase()}</span>
              )}
              {data.options.updated && (
                <span>Updated: {formatDate(data.options.updated)}</span>
              )}
              {data.options.podcast && (
                <span className="inline-flex items-center gap-1 px-2 py-1 bg-purple-100 dark:bg-purple-900 text-purple-800 dark:text-purple-200 rounded-full text-xs font-medium">
                  <svg className="w-3 h-3" fill="currentColor" viewBox="0 0 20 20">
                    <path fillRule="evenodd" d="M9.383 3.076A1 1 0 0110 4v12a1 1 0 01-1.707.707L4.586 13H2a1 1 0 01-1-1V8a1 1 0 011-1h2.586l3.707-3.707a1 1 0 011.09-.217z" clipRule="evenodd" />
                  </svg>
                  Podcast
                </span>
              )}
            </div>
          </div>
        </div>

        {/* Feed Author */}
        {data.options.author && (
          <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
            <div className="flex items-center gap-2">
              <span className="text-sm text-gray-500 dark:text-gray-400">Feed by:</span>
              <Author author={data.options.author} showEmail />
            </div>
          </div>
        )}

        {/* Categories */}
        {data.categories && data.categories.length > 0 && (
          <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Categories:</span>
            </div>
            <div className="flex flex-wrap gap-2">
              {data.categories.map((category, idx) => (
                <span
                  key={idx}
                  className="px-3 py-1 text-sm font-medium bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-300 rounded-full"
                >
                  {category}
                </span>
              ))}
            </div>
          </div>
        )}

        {/* Contributors */}
        {data.contributors && data.contributors.length > 0 && (
          <div className="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
            <div className="flex items-center gap-2 mb-2">
              <span className="text-sm font-medium text-gray-700 dark:text-gray-300">Contributors:</span>
            </div>
            <div className="flex flex-wrap gap-3">
              {data.contributors.map((contributor, idx) => (
                <Author key={idx} author={contributor} />
              ))}
            </div>
          </div>
        )}
      </div>

      {/* Feed Items */}
      <div className="space-y-6">
        <h2 className="text-xl font-semibold text-gray-900 dark:text-white">
          Latest Articles ({data.items.length})
        </h2>
        {data.items.map((item, index) => (
          <Item key={item.id || index} data={item} index={index} />
        ))}
      </div>

      {/* Feed Footer */}
      {data.options.copyright && (
        <div className="text-center text-sm text-gray-500 dark:text-gray-400 py-4">
          {data.options.copyright}
        </div>
      )}
    </div>
  );
}
