# every-news-feed

This is a client app for reading Really Simple Syndicate feeds. 

## Architecture

The app follows RSS standards strictly, with types in `apps/server/src/schemas/feed.ts` as the source of truth. Everything else builds on top of this - the components in `apps/web/src/components/feed` are locked to these types, and the feed route makes typed RPC calls that return data matching this exact schema.

### Tech Stack
- **Server**: Hono.js with tRPC for type-safe APIs, Better-Auth for authentication with NEAR Protocol accounts, Drizzle ORM on PostgreSQL
- **Web**: React with TanStack Router for routing, TanStack Query for data fetching, tRPC client for server communication
- **Data Flow**: Better-fetch pulls RSS feeds from `https://rss.curate.fun`, transforms them through Zod schemas, caches with BunCache
- **Database**: PostgreSQL with Docker Compose setup

### Key Files
- `apps/server/src/schemas/feed.ts` - The RSS schema definitions that everything else builds on
- `apps/server/src/routers/index.ts` - tRPC endpoints for feeds, feed items, and health checks
- `apps/web/src/components/feed/index.tsx` - Main feed display component
- `apps/web/src/components/feed/item.tsx` - Individual feed item component
- `apps/server/src/index.ts` - Server setup with Hono, tRPC, and auth middleware

## Setup

1. `docker compose up -d` to get PostgreSQL running
2. `bun db:migrate` to set up the database schema
3. `bun dev` to start both web and server

## Development

- `bun dev` - Both apps
- `bun dev:web` - Just the React frontend
- `bun dev:server` - Just the Hono backend
- `bun db:studio` - Browse the database
- `bun db:push` - Update database schema

## Links
- [RSS 2.0 Specification](https://validator.w3.org/feed/docs/rss2.html)
- [JSON Feed](https://jsonfeed.org/)
- [Better Auth](https://better-auth.com/)
- [NEAR Protocol](https://near.org/)
- [TanStack Router](https://tanstack.com/router)
- [tRPC](https://trpc.io/)
- [Hono.js](https://hono.dev/)
- [Drizzle ORM](https://orm.drizzle.team/)
